import {PathConfig} from './PathConfig';
import {FilesCollection} from './FilesCollection';
import {LoadFilesNamesFromPath} from './LoadFilesNamesFromPath';
import {FileListLoaderConfig} from './FileListLoaderConfig';
import {FileToList} from './FileToList';

export class FileListLoader {

    private config: FileListLoaderConfig;
    private collection: FilesCollection;

    public constructor (config: FileListLoaderConfig) {
        this.config = this.setDefaultValues(config);

        this.collection = new FilesCollection();
    }

    /**
     * Adding a path to the loader means it will try to find all
     * the files under this folder with the extension sent to the
     * constructor and list in a collection. For each file it find
     * will create an ID. Exception will throw if the ID already exist.
     *
     * @param {PathConfig} pathConfig {path: string, prefix: string}
     * @returns {Promise<void>}
     */
    public async addPaths (pathConfig: PathConfig): Promise<void> | never {
        const loader = new LoadFilesNamesFromPath(pathConfig, this.config, this.collection);
        await loader.findFilesNames(pathConfig.path);
    }

    /**
     * Return the content for the file and cache it.
     * @param {string} fileId The autogenerated id for the file.
     * @returns {any}
     */
    public getFileContent (fileId: string): any {
        return this.collection.getContentOf(fileId);
    }

    /**
     * Get the files we found in the paths
     * @returns {Array<FileToList>} FileToList: {id: string, path: string}.
     */
    public getListOfFiles (): Array<FileToList> {
        return this.collection.getListOfFiles();
    }

    private setDefaultValues (config: FileListLoaderConfig): FileListLoaderConfig {
        if (!config.rootPath) {
            config.rootPath = process.cwd();
        }

        if (typeof config.useFilePathInId === undefined) {
            config.useFilePathInId = true;
        }
        return config;
    }

}
